{"version":3,"sources":["../src/FilterMenu.ts","../src/FilterCollection.ts","../src/excel-bootstrap-table-filter.ts"],"names":["FilterMenu","target","th","column","index","options","tds","find","this","toArray","initialize","menu","dropdownFilterDropdown","appendChild","$trigger","$","children","$content","$menu","click","toggle","document","el","is","has","length","hide","searchToggle","value","selectAllCheckbox","HTMLInputElement","checked","toggleAll","inputs","filter","input","toLowerCase","indexOf","forEach","updateSelectAll","searchFilter","val","selectAllUpdate","i","dropdownFilterItem","td","self","innerText","createElement","className","type","trim","replace","setAttribute","toString","innerHTML","dropdownFilterItemSelectAll","captions","select_all","dropdownFilterSearch","search","dropdownFilterSort","direction","span","split","join","dropdownFilterContent","innerDivs","reduce","arr","values","map","push","sort","a","b","A","B","isNaN","Number","_this","div","firstElementChild","selectAllCheckboxDiv","unshift","searchFilterDiv","outerDiv","innerDiv","elements","concat","a_to_z","z_to_a","html","arrow","icon","hasClass","remove","FilterCollection","ths","columnSelector","filterMenus","rows","table","get","filterMenu","bindCheckboxes","bindSelectAllCheckboxes","bindSort","bindSearch","updateRowVisibility","change","data","$sortElement","order","attr","keyup","$input","showRows","hideRows","selectedLists","j","content","selected","show","flip","tbody","toUpperCase","fn","excelTableFilter","extend","filterCollection"],"mappings":"kEAAA,IAAAA,YAAA,+BAaeC,OAAgBC,GAAiBC,OAAgBC,MAAeC,cACtEA,QAAUA,aACVH,GAAKA,QACLC,OAASA,YACTC,MAAQA,WACRE,IAAML,OAAOM,KAAK,0BAA4BC,KAAKL,OAAS,GAAK,KAAKM,+BAGtEC,WAAP,gBACOC,KAAOH,KAAKI,8BACZV,GAAGW,YAAYL,KAAKG,SAGrBG,UAAWC,EAAEP,KAAKG,KAAKK,SAAS,OAChCC,UAAWF,EAAEP,KAAKG,KAAKK,SAAS,OAChCE,OAAQH,EAAEP,KAAKG,eAGVQ,MAAM,iBAAMF,UAASG,aAE5BC,UAAUF,MAAM,SAASG,QAEpBJ,MAAMK,GAAGD,GAAGrB,SAAWiB,MAAMM,IAAIF,GAAGrB,QAAQwB,SAAW,EAAG,UACpDC,gCAKRC,aAAP,SAAoBC,UACdpB,KAAKqB,4BAA6BC,kBAAkBtB,KAAKqB,kBAAkBE,QAAU,SACrFH,MAAMH,SAAW,EAAE,MAChBO,UAAU,SACXxB,KAAKqB,4BAA6BC,kBAAkBtB,KAAKqB,kBAAkBE,QAAU,iBAItFC,UAAU,YAEVC,OAAOC,OAAO,SAASC,aACnBA,OAAMP,MAAMQ,cAAcC,QAAQT,MAAMQ,gBAAkB,IAChEE,QAAQ,SAASH,aACZJ,QAAU,6BAKbQ,gBAAP,cACM/B,KAAKqB,4BAA6BC,kBAAkB,GAEpDtB,KAAKgC,cAAcC,IAAI,SAEpBZ,kBAAkBE,QAAWvB,KAAKyB,OAAOR,SAAWjB,KAAKyB,OAAOC,OAAO,SAASC,aAC5EA,OAAMJ,UACZN,8BAIAiB,gBAAP,SAAuBX,WAEnBvB,KAAKgC,cAAcC,IAAI,SACpBT,UAAUD,+BAGTC,UAAR,SAAkBD,aAEX,GAAIY,GAAE,EAAGA,EAAInC,KAAKyB,OAAOR,OAAQkB,IAAK,IACrCR,OAAQ3B,KAAKyB,OAAOU,MACpBR,gBAAiBL,kBAAkBK,MAAMJ,QAAUA,+BAInDa,mBAAR,SAA2BC,GAAiBC,SAEtClB,OAAQiB,GAAGE,aACXH,oBAAqBvB,SAAS2B,cAAc,0BAC7BC,UAAY,0BAE3Bd,OAAQd,SAAS2B,cAAc,eAC7BE,KAAO,iBACPtB,MAAQA,MAAMuB,OAAOC,QAAQ,WAAW,UACxCC,aAAa,UAAU,iBACvBJ,UAAY,uCAEZI,aAAa,cAAeP,KAAK3C,OAAOmD,kBACxCD,aAAa,aAAcP,KAAK1C,MAAMkD,+BAEzBzC,YAAYsB,0BACZoB,UAAYX,mBAAmBW,UAAUJ,OAAS,IAAOvB,YACrEgB,0CAGDY,4BAAR,cAEM5B,OAAQpB,KAAKH,QAAQoD,SAASC,cAC9BF,6BAA8BnC,SAAS2B,cAAc,mCAC7BC,UAAY,0BAEpCd,OAAQd,SAAS2B,cAAc,eAC7BE,KAAO,iBACPtB,MAAQpB,KAAKH,QAAQoD,SAASC,iBAC9BL,aAAa,UAAU,iBACvBJ,UAAY,6CACZI,aAAa,cAAe7C,KAAKL,OAAOmD,kBACxCD,aAAa,aAAc7C,KAAKJ,MAAMkD,wCAEhBzC,YAAYsB,mCACZoB,UAAYC,4BAA4BD,UAAY,IAAO3B,YAChF4B,mDAGDG,qBAAR,cAEMf,oBAAqBvB,SAAS2B,cAAc,0BAC7BC,UAAY,4BAE3Bd,OAAQd,SAAS2B,cAAc,eAC7BE,KAAO,aACPD,UAAY,iDACZI,aAAa,cAAe7C,KAAKL,OAAOmD,kBACxCD,aAAa,aAAc7C,KAAKJ,MAAMkD,kBACtCD,aAAa,cAAe7C,KAAKH,QAAQoD,SAASG,2BAErC/C,YAAYsB,aACxBS,0CAGDiB,mBAAR,SAA2BC,cAErBlB,oBAAqBvB,SAAS2B,cAAc,0BAC7BC,UAAY,0BAE3Bc,MAAO1C,SAAS2B,cAAc,aAC7BC,UAAYa,UAAU1B,cAAc4B,MAAM,KAAKC,KAAK,UACpDZ,aAAa,cAAe7C,KAAKL,OAAOmD,iBACxCD,aAAa,aAAc7C,KAAKJ,MAAMkD,iBACtCP,UAAYe,6BAEEjD,YAAYkD,YACxBnB,0CAGDsB,sBAAR,6BACMpB,MAAOtC,QAEP0D,uBAAwB7C,SAAS2B,cAAc,6BAC7BC,UAAY,6BAE9BkB,WAAY3D,KAAKF,IAAI8D,OAAO,SAASC,IAAK/C,OAExCgD,QAASD,IAAIE,IAAI,SAACjD,UAAOA,IAAGyB,UAAUI,YACtCmB,OAAOjC,QAAQf,GAAGyB,UAAUI,QAAU,EAAGkB,IAAIG,KAAKlD,UAE/C+C,UAERI,KAAK,SAASC,EAAGC,MAEZC,GAAIF,EAAE3B,UAAUX,iBAChByC,GAAIF,EAAE5B,UAAUX,kBAEf0C,MAAMC,OAAOH,MAAQE,MAAMC,OAAOF,IAAK,IAGvCE,OAAOH,GAAKG,OAAOF,GAAI,OAAQ,KAC/BE,OAAOH,GAAKG,OAAOF,GAAI,MAAQ,OAE7B,IAGFD,EAAIC,EAAG,OAAQ,KACfD,EAAIC,EAAG,MAAQ,SAIb,KAGRN,IAAK,SAAC1B,UACEmC,OAAKpC,mBAAmBC,GAAIC,aAIhCb,OAASkC,UAAUI,IAAI,SAACU,WAAQA,KAAIC,uBAGrCC,sBAAuB3E,KAAKgD,mCAE3B3B,kBAAoBsD,qBAAqBD,4BAEpCE,QAAQD,yBAEdE,iBAAkB7E,KAAKmD,4BACtBnB,aAAe6C,gBAAgBH,qBAGhCI,UAAWnB,UAAUC,OAAO,SAASkB,SAAUC,mBACxC1E,YAAY0E,gBACdD,WACNjE,SAAS2B,cAAc,iBACjBC,UAAY,wBAEjBuC,gBACAhF,KAAKH,QAAQoE,KAAQe,SAAUA,SAASC,QAC1CjF,KAAKqD,mBAAmBrD,KAAKH,QAAQoD,SAASiC,QAC9ClF,KAAKqD,mBAAmBrD,KAAKH,QAAQoD,SAASkC,aAE5CnF,KAAKH,QAAQuD,OAAQ4B,SAAShB,KAAKa,uBAEhCG,UAASC,OAAOH,UAAUlB,OAAO,SAASwB,KAAMtE,SAC9CT,YAAYS,UACVsE,OACR1B,6CAGGtD,uBAAR,cAEMA,wBAAyBS,SAAS2B,cAAc,8BAC7BC,UAAY,8BAC/B4C,OAAQxE,SAAS2B,cAAc,cAC7BC,UAAY,yDACd6C,MAAOzE,SAAS2B,cAAc,UAC7BC,UAAY,mBACXpC,YAAYiF,6BACKjF,YAAYgF,8BACZhF,YAAYL,KAAK0D,4BAEpCnD,EAAEP,KAAKN,IAAI6F,SAAS,WAAY,GAChCnF,wBAAwBL,KAAK,yBAAyByF,YAEtDjF,EAAEP,KAAKN,IAAI6F,SAAS,aAAc,GAClCnF,wBAAwBL,KAAK,uBAAuByF,YAEpDjF,EAAEP,KAAKN,IAAI6F,SAAS,aAAc,GAClCnF,wBAAwBL,KAAK,2BAA2ByF,eAErDpF,6CCrPX,IAAAqF,kBAAA,qCASehG,OAAgBI,cACtBJ,OAASA,YACTI,QAAUA,aACV6F,IAAMjG,OAAOM,KAAK,KAAOF,QAAQ8F,gBAAgB1F,eACjD2F,YAAc5F,KAAK0F,IAAI3B,IAAI,SAASrE,GAAiBE,UACpDD,QAASY,EAAEb,IAAIE,cACZ,IAAIJ,YAAWC,OAAQC,GAAIC,OAAQC,MAAOC,gBAE9CgG,KAAOpG,OAAOM,KAAK,SAASA,KAAK,MAAME,eACvC6F,MAAQrG,OAAOsG,IAAI,8BAGnB7F,WAAP,gBACO0F,YAAY9D,QAAQ,SAASkE,uBACrB9F,oBAER+F,sBACAC,+BACAC,gBACAC,yCAGCH,eAAR,cACML,aAAc5F,KAAK4F,eACnBC,MAAO7F,KAAK6F,QACZH,KAAM1F,KAAK0F,OACXW,qBAAsBrG,KAAKqG,yBAC1B5G,OAAOM,KAAK,mCAAmCuG,OAAO,cACrD1G,OAAQW,EAAEP,MAAMuG,KAAK,YACrBnF,OAAQb,EAAEP,MAAMiC,kBACRrC,OAAOmC,sCACC6D,YAAaC,KAAMH,mCAInCQ,wBAAR,cACMN,aAAc5F,KAAK4F,eACnBC,MAAO7F,KAAK6F,QACZH,KAAM1F,KAAK0F,OACXW,qBAAsBrG,KAAKqG,yBAC1B5G,OAAOM,KAAK,yCAAyCuG,OAAO,cAC3D1G,OAAQW,EAAEP,MAAMuG,KAAK,YACrBnF,OAAQpB,KAAKuB,oBACL3B,OAAOsC,gBAAgBd,2BACfwE,YAAaC,KAAMH,mCAInCS,SAAR,cACMP,aAAc5F,KAAK4F,eACnBC,MAAO7F,KAAK6F,QACZH,KAAM1F,KAAK0F,OACXzB,MAAOjE,KAAKiE,QACZ6B,OAAQ9F,KAAK8F,SACbjG,SAAUG,KAAKH,WACfwG,qBAAsBrG,KAAKqG,yBAC1B5G,OAAOM,KAAK,yBAAyBY,MAAM,cAC1C6F,cAAejG,EAAEP,MAAMD,KAAK,WAC5BJ,QAAS6G,aAAaD,KAAK,aAC3BE,OAAQD,aAAaE,KAAK,cACzB/G,OAAQ8G,MAAOX,MAAOjG,6BACP+F,YAAaC,KAAMH,mCAInCU,WAAR,cACMR,aAAc5F,KAAK4F,eACnBC,MAAO7F,KAAK6F,QACZH,KAAM1F,KAAK0F,OACXW,qBAAsBrG,KAAKqG,yBAC1B5G,OAAOM,KAAK,2BAA2B4G,MAAM,cAC5CC,QAASrG,EAAEP,MAAMD,KAAK,YACtBH,OAAQgH,OAAOL,KAAK,YACpBnF,OAAQwF,OAAO3E,kBACPrC,OAAOuB,aAAaC,2BACZwE,YAAaC,KAAMH,mCAInCW,oBAAR,SAA4BT,YAAgCC,KAA0BH,QAChFmB,UAAWhB,QACXiB,gBACAC,eAAgBnB,YAAY7B,IAAI,SAASiC,0BAEjCA,WAAWrG,gBACTqG,WAAWvE,OAClBC,OAAO,SAASC,aACRA,OAAMJ,UACZwC,IAAI,SAASpC,aACPA,OAAMP,MAAMuB,OAAOC,QAAQ,WAAW,aAIhD,GAAIT,GAAE,EAAGA,EAAI0D,KAAK5E,OAAQkB,IAAK,IAC9BrC,KAAM+F,KAAK1D,GAAG3B,aACb,GAAIwG,GAAE,EAAGA,EAAID,cAAc9F,OAAQ+F,IAAK,IACvCC,SAAWnH,IAAIiH,cAAcC,GAAGrH,QAAwB4C,UAAUI,OAAOC,QAAQ,WAAW,OAC5FmE,cAAcC,GAAGE,SAASrF,QAAQoF,YAAc,EAAI,GACpDpB,KAAK1D,IAAIjB,eAGX2E,KAAK1D,IAAIgF,qCAKTlD,KAAR,SAAatE,OAAgB8G,MAAeX,MAAoBjG,YAC1DuH,MAAO,KACPX,QAAU5G,QAAQoD,SAASkC,OAAOvD,cAAc4B,MAAM,KAAKC,KAAK,KAAM2D,MAAQ,KAC9EC,OAAQ9G,EAAEuF,OAAO/F,KAAK,SAASgG,IAAI,MACnCF,MAAOtF,EAAE8G,OAAOtH,KAAK,MAAMgG,WAE1B9B,KAAK,SAASC,EAAGC,MAChBC,GAAKF,EAAE1D,SAASb,QAAwB4C,UAAU+E,iBAClDjD,GAAKF,EAAE3D,SAASb,QAAwB4C,UAAU+E,kBAEjDhD,MAAMC,OAAOH,MAAQE,MAAMC,OAAOF,IAAK,IAEvCE,OAAOH,GAAKG,OAAOF,GAAI,OAAQ,EAAE+C,QACjC7C,OAAOH,GAAKG,OAAOF,GAAI,MAAQ,GAAE+C,SAC/B,IAEFhD,EAAIC,EAAG,OAAQ,EAAE+C,QACjBhD,EAAIC,EAAG,MAAQ,GAAE+C,WAEf,SAGJ,GAAIjF,GAAE,EAAGA,EAAI0D,KAAK5E,OAAQkB,IAAK,OAC5B9B,YAAYwF,KAAK1D,gCCxI5B5B,KAAEgH,GAAWC,iBAAmB,SAAwB3H,YACnDJ,QAASO,aAEHO,IAAEkH,UAAYlH,IAAEgH,GAAWC,iBAAiB3H,QAASA,kBAEpDA,SAAQ8F,iBAAmB,YAAa9F,QAAQ8F,eAAiB,YACjE9F,SAAQoE,OAAS,YAAapE,QAAQoE,KAAO,cAC7CpE,SAAQuD,SAAW,YAAavD,QAAQuD,OAAS,cAEjDvD,SAAQoD,WAAa,YAAapD,QAAQoD,iBAC3C,gBACA,gBACA,oBACI,iBAGVyE,kBAAmB,GAAIjC,kBAAiBhG,OAAQI,0BACnCK,mBAGVT,QAIRc,KAAEgH,GAAWC,iBAAiB3H","file":"dist/excel-bootstrap-table-filter-bundle.min.js","sourcesContent":["export class FilterMenu {\n\n  th:                 HTMLElement;\n  tds:                Array<HTMLElement>;\n  column:             number;\n  index:              number;\n  menu:               HTMLElement;\n  inputs:             Array<Element>;\n  selectAllCheckbox:  Element;\n  searchFilter:       Element;\n  options:            Options;\n  target:             JQuery;\n\n  constructor (target: JQuery, th: HTMLElement, column: number, index: number, options: Options) {\n    this.options = options;\n    this.th = th;\n    this.column = column;\n    this.index = index;\n    this.tds = target.find('tbody tr td:nth-child(' + (this.column + 1) + ')').toArray();\n  }\n\n  public initialize(): void {\n    this.menu = this.dropdownFilterDropdown();\n    this.th.appendChild(this.menu);\n\n    // variables for click handlers\n    let $trigger = $(this.menu.children[0]);\n    let $content = $(this.menu.children[1]);\n    let $menu = $(this.menu);\n\n    // toggle hide/show when the trigger is clicked\n    $trigger.click(() => $content.toggle());\n\n    $(document).click(function(el) {\n      // hide the content if the user clicks outside of the menu\n      if (!$menu.is(el.target) && $menu.has(el.target).length === 0) {\n        $content.hide();\n      }\n    });\n  }\n\n  public searchToggle(value: string): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = false;\n    if (value.length === 0){\n      this.toggleAll(true);\n      if (this.selectAllCheckbox instanceof HTMLInputElement) this.selectAllCheckbox.checked = true;\n      return;\n    }\n    // deselect all checkboxes initially\n    this.toggleAll(false);\n    // select checkboxes that match the search parameter\n    this.inputs.filter(function(input: HTMLInputElement) {\n      return input.value.toLowerCase().indexOf(value.toLowerCase()) > -1;\n    }).forEach(function(input: HTMLInputElement) {\n      input.checked = true;\n    });\n  }\n\n\n  public updateSelectAll(): void {\n    if (this.selectAllCheckbox instanceof HTMLInputElement) {\n      // clear search parameters, if any\n      $(this.searchFilter).val('');\n      // Check if all inputs are selected\n      this.selectAllCheckbox.checked = (this.inputs.length === this.inputs.filter(function(input: HTMLInputElement) {\n        return input.checked;\n      }).length);\n    }\n  }\n\n  public selectAllUpdate(checked: boolean): void {\n    // clear search parameters, if any\n    $(this.searchFilter).val('');\n    this.toggleAll(checked);\n  }\n\n  private toggleAll(checked: boolean): void {\n    // loop through all inputs and check or uncheck each\n    for (var i=0; i < this.inputs.length; i++) {\n      let input = this.inputs[i];\n      if (input instanceof HTMLInputElement) input.checked = checked;\n    }\n  }\n\n  private dropdownFilterItem(td: HTMLElement, self: any): HTMLElement {\n    // build holder div\n    let value = td.innerText;\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = value.trim().replace(/ +(?= )/g,'');\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item item';\n    // get index of td element\n    input.setAttribute('data-column', self.column.toString());\n    input.setAttribute('data-index', self.index.toString());\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    dropdownFilterItem.innerHTML = dropdownFilterItem.innerHTML.trim() + ' ' +  value;\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterItemSelectAll(): HTMLElement {\n    // build holder div\n    let value = this.options.captions.select_all;\n    let dropdownFilterItemSelectAll = document.createElement('div');\n    dropdownFilterItemSelectAll.className = 'dropdown-filter-item';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'checkbox';\n    input.value = this.options.captions.select_all;\n    input.setAttribute('checked','checked');\n    input.className = 'dropdown-filter-menu-item select-all';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    // append input to holding div\n    dropdownFilterItemSelectAll.appendChild(input);\n    dropdownFilterItemSelectAll.innerHTML = dropdownFilterItemSelectAll.innerHTML + ' ' +  value;\n    return dropdownFilterItemSelectAll;\n  }\n\n  private dropdownFilterSearch(): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-search';\n    // build input\n    let input = document.createElement('input');\n    input.type = 'text';\n    input.className = 'dropdown-filter-menu-search form-control';\n    input.setAttribute('data-column', this.column.toString());\n    input.setAttribute('data-index', this.index.toString());\n    input.setAttribute('placeholder', this.options.captions.search);\n    // append input to holding div\n    dropdownFilterItem.appendChild(input);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterSort(direction: string): HTMLElement {\n    // build holder div\n    let dropdownFilterItem = document.createElement('div');\n    dropdownFilterItem.className = 'dropdown-filter-sort';\n    // build span\n    let span = document.createElement('span');\n    span.className = direction.toLowerCase().split(' ').join('-');\n    span.setAttribute('data-column', this.column.toString());\n    span.setAttribute('data-index', this.index.toString());\n    span.innerText = direction;\n    // append input to holding div\n    dropdownFilterItem.appendChild(span);\n    return dropdownFilterItem;\n  }\n\n  private dropdownFilterContent(): HTMLElement {\n    let self = this;\n    // build holder div\n    let dropdownFilterContent = document.createElement('div');\n    dropdownFilterContent.className = 'dropdown-filter-content';\n\n    let innerDivs = this.tds.reduce(function(arr, el) {\n      // get unique values in column\n      let values = arr.map((el) => el.innerText.trim());\n      if (values.indexOf(el.innerText.trim()) < 0) arr.push(el);\n      // return unique values\n      return arr;\n    }, [])\n    .sort(function(a, b) {\n      // sort values for display in dropdown\n      var A = a.innerText.toLowerCase();\n      var B = b.innerText.toLowerCase();\n\n      if (!isNaN(Number(A)) && !isNaN(Number(B))) {\n\n        // handle numbers\n        if(Number(A) < Number(B)) return -1;\n        if(Number(A) > Number(B)) return  1;\n\n      } else {\n\n        // handle strings\n        if(A < B) return -1;\n        if(A > B) return  1;\n\n      }\n      //return a.innerText.toLowerCase() > b.innerText.toLowerCase() ? 1 : -1;\n      return 0;\n    })\n    // create dropdown filter items out of each value\n    .map( (td) => {\n      return this.dropdownFilterItem(td, self);\n    })\n\n    // map inputs to instance, we will need these later\n    this.inputs = innerDivs.map((div) => div.firstElementChild);\n\n    // add a select all checkbox\n    let selectAllCheckboxDiv = this.dropdownFilterItemSelectAll();\n    // map the select all  checkbox to the instance, we will need it later\n    this.selectAllCheckbox = selectAllCheckboxDiv.firstElementChild;\n    // the checkbox will precede the other inputs\n    innerDivs.unshift(selectAllCheckboxDiv);\n\n    let searchFilterDiv = this.dropdownFilterSearch();\n    this.searchFilter = searchFilterDiv.firstElementChild;\n\n    // create outer div, and place all inner divs within it\n    let outerDiv = innerDivs.reduce(function(outerDiv, innerDiv) {\n      outerDiv.appendChild(innerDiv);\n      return outerDiv;\n    }, document.createElement('div'));\n    outerDiv.className = 'checkbox-container';\n\n    let elements: Array<HTMLElement> = [];\n    if (this.options.sort  ) elements= elements.concat([\n      this.dropdownFilterSort(this.options.captions.a_to_z),\n      this.dropdownFilterSort(this.options.captions.z_to_a)\n      ]);\n    if (this.options.search) elements.push(searchFilterDiv);\n\n    return elements.concat(outerDiv).reduce(function(html, el) {\n        html.appendChild(el);\n        return html;\n    }, dropdownFilterContent);\n  }\n\n  private dropdownFilterDropdown(): HTMLElement {\n    // build holder div\n    let dropdownFilterDropdown = document.createElement('div');\n    dropdownFilterDropdown.className = 'dropdown-filter-dropdown';\n    let arrow = document.createElement('span');\n    arrow.className = 'glyphicon glyphicon-arrow-down dropdown-filter-icon';\n    let icon = document.createElement('i');\n    icon.className = 'arrow-down';\n    arrow.appendChild(icon);\n    dropdownFilterDropdown.appendChild(arrow);\n    dropdownFilterDropdown.appendChild(this.dropdownFilterContent());\n\n    if ($(this.th).hasClass('no-sort')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-sort').remove();\n    }\n    if ($(this.th).hasClass('no-filter')) {\n      $(dropdownFilterDropdown).find('.checkbox-container').remove();\n    }\n    if ($(this.th).hasClass('no-search')) {\n      $(dropdownFilterDropdown).find('.dropdown-filter-search').remove();\n    }\n    return dropdownFilterDropdown;\n  }\n\n}\n","import { FilterMenu } from './FilterMenu'\n\nexport class FilterCollection {\n\n  filterMenus:  Array<FilterMenu>;\n  rows:         Array<HTMLElement>;\n  ths:          Array<HTMLElement>;\n  table:        HTMLElement;\n  options:      Options;\n  target:       JQuery;\n\n  constructor (target: JQuery, options: Options) {\n    this.target = target;\n    this.options = options;\n    this.ths = target.find('th' + options.columnSelector).toArray()\n    this.filterMenus = this.ths.map(function(th: HTMLElement, index: number) {\n      let column = $(th).index();\n      return new FilterMenu(target, th, column, index, options);\n    });\n    this.rows = target.find('tbody').find('tr').toArray();\n    this.table = target.get(0);\n  }\n\n  public initialize(): void {\n    this.filterMenus.forEach(function(filterMenu) {\n      filterMenu.initialize();\n    });\n    this.bindCheckboxes();\n    this.bindSelectAllCheckboxes();\n    this.bindSort();\n    this.bindSearch();\n  }\n\n  private bindCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.dropdown-filter-menu-item.item').change(function() {\n      let index = $(this).data('index');\n      let value = $(this).val();\n      filterMenus[index].updateSelectAll();\n      updateRowVisibility(filterMenus, rows, ths);\n    });\n  }\n\n  private bindSelectAllCheckboxes(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.dropdown-filter-menu-item.select-all').change(function() {\n      let index = $(this).data('index');\n      let value = this.checked;\n      filterMenus[index].selectAllUpdate(value);\n      updateRowVisibility(filterMenus, rows, ths);\n    });\n  }\n\n  private bindSort(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let ths = this.ths;\n    let sort = this.sort;\n    let table = this.table;\n    let options = this.options;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.dropdown-filter-sort').click(function() {\n      let $sortElement = $(this).find('span');\n      let column = $sortElement.data('column');\n      let order = $sortElement.attr('class');\n      sort(column, order, table, options);\n      updateRowVisibility(filterMenus, rows, ths);\n    });\n  }\n\n  private bindSearch(): void {\n    let filterMenus = this.filterMenus;\n    let rows = this.rows;\n    let ths = this.ths;\n    let updateRowVisibility = this.updateRowVisibility;\n    this.target.find('.dropdown-filter-search').keyup(function() {\n      let $input = $(this).find('input');\n      let index = $input.data('index');\n      let value = $input.val();\n      filterMenus[index].searchToggle(value);\n      updateRowVisibility(filterMenus, rows, ths);\n    });\n  }\n\n  private updateRowVisibility(filterMenus: Array<FilterMenu>, rows: Array<HTMLElement>, ths: Array<HTMLElement>): void {\n    let showRows = rows;\n    let hideRows: Array<HTMLElement> = [];\n    let selectedLists = filterMenus.map(function(filterMenu) {\n      return {\n        column: filterMenu.column,\n        selected: filterMenu.inputs\n          .filter(function(input: HTMLInputElement) {\n            return input.checked\n          }).map(function(input: HTMLInputElement) {\n            return input.value.trim().replace(/ +(?= )/g,'');\n          })\n      };\n    });\n    for (let i=0; i < rows.length; i++) {\n      let tds = rows[i].children;\n      for (let j=0; j < selectedLists.length; j++) {\n        let content = (tds[selectedLists[j].column] as HTMLElement).innerText.trim().replace(/ +(?= )/g,'')\n        if (selectedLists[j].selected.indexOf(content) === -1 ) {\n          $(rows[i]).hide();\n          break;\n        }\n        $(rows[i]).show();\n      }\n    }\n  }\n\n  private sort(column: number, order: string, table: HTMLElement, options: Options): void {\n    let flip = 1;\n    if (order === options.captions.z_to_a.toLowerCase().split(' ').join('-')) flip = -1;\n    let tbody = $(table).find('tbody').get(0);\n    let rows = $(tbody).find('tr').get();\n\n    rows.sort(function(a, b) {\n      var A = (a.children[column] as HTMLElement).innerText.toUpperCase();\n      var B = (b.children[column] as HTMLElement).innerText.toUpperCase();\n\n      if (!isNaN(Number(A)) && !isNaN(Number(B))) {\n        // handle numbers\n        if(Number(A) < Number(B)) return -1*flip;\n        if(Number(A) > Number(B)) return  1*flip;\n      } else {\n        // handle strings\n        if(A < B) return -1*flip;\n        if(A > B) return  1*flip;\n      }\n      return 0;\n    });\n\n    for (var i=0; i < rows.length; i++) {\n      tbody.appendChild(rows[i]);\n    }\n  }\n\n\n}\n","import $ from 'jquery';\nimport { FilterCollection } from './FilterCollection'\n\n// Define the plugin function on the jQuery extension point.\n($.fn as any).excelTableFilter = function (this: JQuery, options: Options) {\n  let target = this;\n  // Merge the global options with the per-call options.\n  options = $.extend({}, ($.fn as any).excelTableFilter.options, options);\n\n  if (typeof options.columnSelector === 'undefined') options.columnSelector = '';\n  if (typeof options.sort === 'undefined') options.sort = true;\n  if (typeof options.search === 'undefined') options.search = true;\n\n  if (typeof options.captions === 'undefined') options.captions = {\n    a_to_z: 'A to Z',\n    z_to_a: 'Z to A',\n    search: 'Search',\n    select_all: 'Select All'\n  }\n\n  let filterCollection = new FilterCollection(target, options);\n  filterCollection.initialize();\n\n  // Return the jQuery object for chaining.\n  return target;\n};\n\n// Define the plugin's global default options.\n($.fn as any).excelTableFilter.options = {};\n"]}